name: Destroy Flask Game Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type YES to confirm destruction of all infrastructure'
        required: true
        default: 'NO'

env:
  AWS_REGION: us-east-1

jobs:
  destroy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Confirm destruction
        run: |
          echo "🚨 DESTRUCTION CONFIRMATION REQUIRED 🚨"
          echo "This will DESTROY all infrastructure including:"
          echo "• ECS Cluster & Service"
          echo "• RDS Database (ALL DATA WILL BE LOST)"
          echo "• ALB & Target Groups"
          echo "• VPC & Networking components"
          echo "• ECR Repository (including all images)"
          if [ "${{ github.event.inputs.confirm_destroy }}" != "YES" ]; then
            echo "❌ Destruction not confirmed. Exiting."
            exit 1
          fi

      - name: Stop ECS tasks and services
        run: |
          aws ecs update-service \
            --cluster flask-game-cluster \
            --service flask-game-service \
            --desired-count 0 \
            --region $AWS_REGION || echo "ECS service might not exist"
          
          sleep 30
          
          aws ecs delete-service \
            --cluster flask-game-cluster \
            --service flask-game-service \
            --force \
            --region $AWS_REGION || echo "ECS service might not exist"

      - name: Force delete ECR repository
        run: |
          REPO_NAME="flask-game"
          if aws ecr describe-repositories --repository-names $REPO_NAME --region $AWS_REGION > /dev/null 2>&1; then
            echo "ECR repository exists, deleting all images..."
            IMAGE_DIGESTS=$(aws ecr list-images --repository-name $REPO_NAME --region $AWS_REGION --query 'imageIds[].imageDigest' --output text)
            for digest in $IMAGE_DIGESTS; do
              aws ecr batch-delete-image --repository-name $REPO_NAME --image-ids imageDigest=$digest --region $AWS_REGION || true
            done
            aws ecr delete-repository --repository-name $REPO_NAME --force --region $AWS_REGION
            echo "✅ ECR repository deleted"
          else
            echo "ECR repository does not exist"
          fi

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Destroy (skip ECR)
        run: terraform destroy -auto-approve \
              -target=aws_db_instance.main \
              -target=aws_ecs_service.main \
              -target=aws_ecs_cluster.main \
              -target=aws_lb.main \
              -target=aws_vpc.main
        working-directory: terraform
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Terraform Destroy (complete)
        run: terraform destroy -auto-approve
        working-directory: terraform
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Verify destruction
        run: |
          echo "✅ Infrastructure destruction completed!"
          echo "💾 All AWS resources have been terminated."
