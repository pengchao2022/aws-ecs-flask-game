name: Deploy Flask Game to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: flask-game
  ECS_SERVICE: flask-game-service
  ECS_CLUSTER: flask-game-cluster
  CONTAINER_NAME: flask-game

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Python dependencies
        run: |
          pip install flask==2.3.3 psycopg2-binary==2.9.7 gunicorn==21.2.0
          
      - name: Verify Flask installation
        run: |
          python -c "import flask; print('✅ Flask version:', flask.__version__)"
          
      - name: Verify all required modules
        run: |
          python -c "
          modules = ['flask', 'psycopg2', 'gunicorn']
          for module in modules:
              try:
                  __import__(module)
                  print(f'✅ {module} imported successfully')
              except ImportError as e:
                  print(f'❌ Failed to import {module}: {e}')
                  exit(1)
          print('✅ All modules imported successfully')
          "

      - name: Check application syntax
        run: |
          cd src
          python -m py_compile app.py
          echo "✅ Application syntax is correct"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        run: terraform init
        working-directory: terraform
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_github_repo: ${{ github.repository }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan
        working-directory: terraform
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_github_repo: ${{ github.repository }}

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan
        working-directory: terraform

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          # 构建 Docker 镜像
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
          
          # 推送镜像到 ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Force new ECS deployment
        run: |
          # 强制 ECS 服务进行新部署
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region $AWS_REGION

      - name: Wait for deployment to stabilize
        run: |
          echo "Waiting for deployment to stabilize..."
          # 等待服务完全部署
          sleep 180

      - name: Get ALB DNS name
        id: get-alb
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name)
          echo "Application URL: http://$ALB_DNS"
          echo "alb_dns_name=$ALB_DNS" >> $GITHUB_OUTPUT
        working-directory: terraform

      - name: Test application endpoint
        run: |
          echo "Testing application endpoint: http://${{ steps.get-alb.outputs.alb_dns_name }}"
          
          # 使用重试机制测试应用端点
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts..."
            
            if curl -f --connect-timeout 30 http://${{ steps.get-alb.outputs.alb_dns_name }}; then
              echo "✅ Application is responding correctly"
              exit 0
            else
              echo "Application not ready yet, waiting 30 seconds..."
              sleep 30
              attempt=$((attempt + 1))
            fi
          done
          
          echo "⚠️ Application might still be starting - check ECS service logs for details"
          # 不退出失败，让部署继续完成

      - name: Deployment summary
        run: |
          echo "🎉 Deployment completed!"
          echo "🌐 Application URL: http://${{ steps.get-alb.outputs.alb_dns_name }}"
          echo "📊 ECS Cluster: ${{ env.ECS_CLUSTER }}"
          echo "🚀 ECS Service: ${{ env.ECS_SERVICE }}"
          echo ""
          echo "💡 Next steps:"
          echo "   - The application might take a few minutes to fully start"
          echo "   - Check CloudWatch logs if the application is not accessible"
          echo "   - Use the Destroy workflow to clean up resources when done"