name: Deploy Flask Game to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: flask-game
  ECS_SERVICE: flask-game-service
  ECS_CLUSTER: flask-game-cluster
  CONTAINER_NAME: flask-game

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          cd src
          pip install -r requirements.txt
          
      - name: Run syntax check
        run: |
          cd src
          python -m py_compile app.py
          echo "✅ Syntax check passed"

      - name: Verify imports
        run: |
          cd src
          python -c "
          try:
              import flask
              import psycopg2
              print('✅ All required modules are available')
          except ImportError as e:
              print(f'❌ Missing module: {e}')
              exit(1)
          "

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: terraform
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_github_repo: ${{ github.repository }}

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan
        working-directory: terraform
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_github_repo: ${{ github.repository }}

      - name: Terraform Apply
        run: terraform apply -input=false tfplan
        working-directory: terraform

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Force new ECS deployment
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment --region $AWS_REGION

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 120  # 增加等待时间确保服务完全启动

      - name: Get ALB DNS name
        id: get-alb
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name)
          echo "alb_dns_name=$ALB_DNS" >> $GITHUB_OUTPUT
        working-directory: terraform

      - name: Test application endpoint
        run: |
          echo "Testing application endpoint: http://${{ steps.get-alb.outputs.alb_dns_name }}"
          # 重试机制，因为应用可能需要时间启动
          for i in {1..10}; do
            if curl -f --connect-timeout 30 http://${{ steps.get-alb.outputs.alb_dns_name }}; then
              echo "✅ Application is responding correctly"
              exit 0
            else
              echo "Attempt $i: Application not ready yet, waiting..."
              sleep 30
            fi
          done
          echo "❌ Application failed to start within timeout period"
          exit 1

      - name: Update deployment status
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Application URL: http://${{ steps.get-alb.outputs.alb_dns_name }}"
          echo "📊 ECS Cluster: ${{ env.ECS_CLUSTER }}"
          echo "🚀 ECS Service: ${{ env.ECS_SERVICE }}"