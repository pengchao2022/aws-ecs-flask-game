name: Deploy Flask Game to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: flask-game
  ECS_SERVICE: flask-game-service
  ECS_CLUSTER: flask-game-cluster
  CONTAINER_NAME: flask-game

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate files exist
        run: |
          echo "Checking required files..."
          [ -f "src/app.py" ] && echo "✅ src/app.py exists" || exit 1
          [ -f "src/requirements.txt" ] && echo "✅ src/requirements.txt exists" || exit 1
          [ -f "docker/Dockerfile" ] && echo "✅ docker/Dockerfile exists" || exit 1
          [ -f "terraform/main.tf" ] && echo "✅ terraform/main.tf exists" || exit 1
          echo "✅ All required files are present"

      - name: Validate Python syntax
        run: |
          cd src
          python -m py_compile app.py
          echo "✅ Python syntax is valid"

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        run: terraform init
        working-directory: terraform
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_github_repo: ${{ github.repository }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan
        working-directory: terraform
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_github_repo: ${{ github.repository }}

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan
        working-directory: terraform

      - name: Get ECR repository URL
        id: ecr-repo
        run: |
          ECR_URL=$(terraform output -raw ecr_repository_url)
          echo "ecr_repository_url=$ECR_URL" >> $GITHUB_OUTPUT
        working-directory: terraform

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            ${{ steps.ecr-repo.outputs.ecr_repository_url }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region $AWS_REGION

      - name: Wait for deployment to stabilize
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 180

      - name: Get ALB DNS name
        id: get-alb
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name)
          echo "alb_dns_name=$ALB_DNS" >> $GITHUB_OUTPUT
        working-directory: terraform

      - name: Test application endpoint
        run: |
          echo "Testing application endpoint: http://${{ steps.get-alb.outputs.alb_dns_name }}"
          
          # 使用重试机制测试应用端点
          max_attempts=12
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts..."
            
            if curl -f --max-time 30 http://${{ steps.get-alb.outputs.alb_dns_name }}; then
              echo "✅ Application is responding correctly"
              exit 0
            else
              echo "Application not ready yet, waiting 30 seconds..."
              sleep 30
              attempt=$((attempt + 1))
            fi
          done
          
          echo "⚠️ Application might still be starting - check ECS service logs for details"

      - name: Deployment summary
        run: |
          echo "🎉 Deployment completed!"
          echo "🌐 Application URL: http://${{ steps.get-alb.outputs.alb_dns_name }}"
          echo "📊 ECS Cluster: ${{ env.ECS_CLUSTER }}"
          echo "🚀 ECS Service: ${{ env.ECS_SERVICE }}"
          echo "🐳 ECR Repository: ${{ steps.ecr-repo.outputs.ecr_repository_url }}"