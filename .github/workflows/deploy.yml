name: Deploy Flask Game to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: flask-game
  ECS_SERVICE: flask-game-service
  ECS_CLUSTER: flask-game-cluster

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate files exist
        run: |
          echo "Checking required files..."
          [ -f "src/app.py" ] && echo "✅ src/app.py exists" || exit 1
          [ -f "src/requirements.txt" ] && echo "✅ src/requirements.txt exists" || exit 1
          [ -f "docker/Dockerfile" ] && echo "✅ docker/Dockerfile exists" || exit 1
          echo "✅ All required files are present"

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: terraform
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve
        working-directory: terraform

      - name: Get ECR repository URL
        id: get-ecr-url
        run: |
          ECR_URL=$(terraform output -raw ecr_repository_url)
          echo "ecr_url=$ECR_URL" >> $GITHUB_OUTPUT
        working-directory: terraform

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ steps.get-ecr-url.outputs.ecr_url }}

      - name: Build and push with Buildx
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.get-ecr-url.outputs.ecr_url }}:latest
          platforms: linux/amd64

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region $AWS_REGION

      - name: Get application URL
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name)
          echo "Application URL: http://$ALB_DNS"
        working-directory: terraform